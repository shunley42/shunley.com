[{"authors":["admin"],"categories":null,"content":"Sam Hunley (he/him) is the Product Owner of the Research \u0026amp; Analytics team at the Bureau of the Fiscal service. In this role, he is focused on developing analyses and tools to improve the functioning of the Fiscal Service and the government as a whole. His goal is to help clients (i.e., other government offices) efficiently and effectively achieve their mission through providing data-based tools or analyses.\nPrior to becoming a civil servant, Sam earned his PhD in Cognitive Psychology at Emory University. In his spare time, Sam likes to bake, roast coffee, and spend time with his partner and their pups. Sam identifies as bisexual/queer. The views presented on this website do not reflect those of the US Federal Government.\n","date":1554595200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Sam Hunley (he/him) is the Product Owner of the Research \u0026amp; Analytics team at the Bureau of the Fiscal service. In this role, he is focused on developing analyses and tools to improve the functioning of the Fiscal Service and the government as a whole. His goal is to help clients (i.e., other government offices) efficiently and effectively achieve their mission through providing data-based tools or analyses.\nPrior to becoming a civil servant, Sam earned his PhD in Cognitive Psychology at Emory University.","tags":null,"title":"Sam Hunley","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":[],"categories":["Analysis","R","USAspending"],"content":" Y’all. I love coffee. If you have spent any time around me, you have probably seen me drink at least a cup or two. Consequently, I was interested in seeing how much the US Federal government spends on this magical bean.\nThe public has two options to see how much money the Federal government spends on coffee. Option 1 would be to call up a bunch of agencies (likely with FOIA in hand) and ask them (preferably nicely since you just FOIA’d them) to do the math for you.\nOption 2 would be to get a rough estimate using Federal award data from USASpending.gov. Since I’m not in the mood to anger hordes of my fellow civil servants, what I’m going to do is look at Federal awards (i.e., contracts and financial assistance such as grants) that include the word “coffee” in the description. This approach without a doubt includes some spending where coffee wasn’t involved (e.g., a contract that bought coffee in addition to dinner for a banquet) and misses coffee purchases that simply weren’t labeled in the data. But it should make for a fun afternoon nonetheless!\nFor the data nerds, you can find my code at the end of the post.\nFinancial Assistance or Contracts? Analyzing financial assistance and contracts data at the same time can be a headache. So, I thought, why not eliminate whichever looks the most boring?\nIn the table, you can see that contracts accounted for about $4.6 million more than financial assistance in FY 2019. Moreover, there are over 1,900 unique contracts that included the word “coffee”, whereas there’s only 25 financial assistance awards. So, while I’m sure the financial assistance data are interesting in their own way, I’m going to focus on contracts for this analysis.\nAs a quick note, I relied VERY heavily on Laura Ellis’ blog post on the formattable package to make my tables. If you’ve read her post, my style will look super familiar.\n Contracts: Who’s Doing the Awarding? Now that I’ve decided to focus on contracts, the next question is, which agency awarded the most contracts? Time for another table.\nIt looks like the Department of Defense issued the most awards for coffee. In fact, 91.6% of all contract obligations with the word “coffee” in the award description are coming from the DoD. Honestly, that makes sense to me. Not only is the DoD one of the largest agencies in terms of employees, it also includes the most employees who are in dire need of caffeination on a regular basis (i.e., folks in the armed forces).\nWhen you look at the awarding subagencies on the coffee contracts, 91% are being handled by the DoD’s Defense Logistics Agency (DLA). This finding fits with what I know from experience about DLA. DLA is the subagency responsible for ensuring that military bases have the foodstuffs they need to function. They are so good at their job, that they have even partnered with the USDA on the USDA DoD Fresh program to deliver fresh fruits and vegetables to participating US schools.\n Where are These Contracts Going? We now know that DoD had the most contracts that mention coffee in FY 2019, and we know that most of these contracts were handled by DLA. The next step is to figure out where this money is being spent. Looking at the recipient country label, it looks like 87% is going to the US, so let’s focus on that. At this point, I’m itching to make a visualization, and I’m thinking that this is a great opportunity for a choropleth (AKA a heatmap).\nYou can right-click on the image and select “View Image” to see it in a bigger size. This visualization reveals that most of coffee related awards are being obligated to recipients in California, which makes sense given that it’s the most populous State and has multiple large military bases. Virginia comes in 2nd, followed by Florida, and then, finally, Washington State.\n In Summary… All told, the US Federal government issued close to $19 million in awards that included the word “coffee” in the description. Of these awards, $11.7 million (62.2%) were contracts, and $10.7 million (91.6%) of these contracts were issued by the Department of Defense. DLA issued the vast majority of these contracts, awarding the funds to recipients both locally as well as globally. Within the US, the majority of these awards were issued to recipients in California.\nAnd there you have it! That’s as far as I’m going to take this analysis. If you want to see the code I used, it’s included below.\n Getting the Data The data I used for this analysis can be accessed through USASpending.gov and can be found in the Awards Archive. You will want to download both the contracts and financial assistance data for 2019, and you can ignore the “delta” files. You will end up with 2 fairly large zip files, which, once unzipped, weigh in at around 15 GB. It’s a lot of data, but I found some work arounds that made it fairly easy to process on a 2017 MacBook with only 8 GB of RAM.\n Processing the Data The real heavy lifting here comes in whittling the data down to a manageable size. I ended up opting to process one CSV at a time to prevent my computer from crashing, and then I ran it all through for loops because I’m lazy. You can load the data using any package you like, but I would like to plug vroom. It’s crazy fast at processing large data files.\n###### # # # Analyzing FY19 Federal Award (contracts \u0026amp; financial assistance) for \u0026quot;coffee\u0026quot; spending # All data from USAspending.gov # Code written by Sam Hunley (@shunley42) # www.shunley.com # 10/26/19 # # ##### ##### # Loading Packages and Setting Directories ##### library(tidyverse) library(vroom) library(openxlsx) library(formattable) library(scales) library(viridis) # Create Working Directory Short Cuts local_dir \u0026lt;- \u0026quot;/Users/samhunley/Desktop\u0026quot; setwd(local_dir) ##### # Loading CONTRACT award data # Looping it so that I don\u0026#39;t fry my Macbook # The data are the 2019 contracts archive from # https://www.usaspending.gov/#/download_center/award_data_archive ##### num_files = length(list.files(path = \u0026quot;2019_all_Contracts_Full_20191009\u0026quot;)) for (j in 1:num_files){ if (j == 1){ address = paste(\u0026quot;2019_all_Contracts_Full_20191009/\u0026quot;, \u0026quot;2019_all_Contracts_Full_20191010\u0026quot;, \u0026quot;_\u0026quot;, 1 ,\u0026quot;.csv\u0026quot;, sep = \u0026quot;\u0026quot;) contractsA \u0026lt;- vroom(address, delim = \u0026quot;,\u0026quot;, col_select = c(award_id_piid, award_description, product_or_service_code, product_or_service_code_description, action_date, naics_description, awarding_agency_name, awarding_sub_agency_name, recipient_name, recipient_country_name, recipient_state_name, recipient_city_name, federal_action_obligation)) contractsA$award_description \u0026lt;- gsub(\u0026#39;\\\u0026quot;|\\\\\u0026#39;, \u0026quot;\u0026quot;, contractsA$award_description, fixed = TRUE) contractsA \u0026lt;- filter(contractsA, str_detect(str_to_lower(award_description), \u0026quot;coffee\u0026quot;)) print(paste(\u0026quot;File Completed: \u0026quot;, j)) } else{ address = paste(\u0026quot;2019_all_Contracts_Full_20191009/\u0026quot;, \u0026quot;2019_all_Contracts_Full_20191010\u0026quot;, \u0026quot;_\u0026quot;, j ,\u0026quot;.csv\u0026quot;, sep = \u0026quot;\u0026quot;) contractsB \u0026lt;- vroom(address, delim = \u0026quot;,\u0026quot;, col_select = c(award_id_piid, award_description, product_or_service_code, product_or_service_code_description, action_date, naics_description, awarding_agency_name, awarding_sub_agency_name, recipient_name, recipient_country_name, recipient_state_name, recipient_city_name, federal_action_obligation)) contractsB$award_description \u0026lt;- gsub(\u0026#39;\\\u0026quot;|\\\\\u0026#39;, \u0026quot;\u0026quot;, contractsB$award_description, fixed = TRUE) contractsB \u0026lt;- filter(contractsB, str_detect(str_to_lower(award_description), \u0026quot;coffee\u0026quot;)) contractsA \u0026lt;- rbind(contractsA, contractsB) print(paste(\u0026quot;File Completed: \u0026quot;, j)) } } saveRDS(contractsA, \u0026quot;coffeeContracts.RData\u0026quot;) ##### # Loading FINANCIAL ASSISTANCE award data # Looping it so that I don\u0026#39;t fry my Macbook # The data are the 2019 contracts archive from # https://www.usaspending.gov/#/download_center/award_data_archive ##### num_files = length(list.files(path = \u0026quot;2019_all_Assistance_Full_20191009\u0026quot;)) for (j in 1:num_files){ if (j == 1){ address = paste(\u0026quot;2019_all_Assistance_Full_20191009/\u0026quot;, \u0026quot;2019_all_Assistance_Full_20191010\u0026quot;, \u0026quot;_\u0026quot;, 1 ,\u0026quot;.csv\u0026quot;, sep = \u0026quot;\u0026quot;) financialA \u0026lt;- vroom(address, delim = \u0026quot;,\u0026quot;, col_select = c(award_id_fain, award_id_uri, award_description, cfda_title, action_date, awarding_agency_name, awarding_sub_agency_name, recipient_name, recipient_country_name, recipient_state_name, recipient_city_name, federal_action_obligation)) financialA$award_description \u0026lt;- gsub(\u0026#39;\\\u0026quot;|\\\\\u0026#39;, \u0026quot;\u0026quot;, financialA$award_description, fixed = TRUE) financialA \u0026lt;- filter(financialA, str_detect(str_to_lower(award_description), \u0026quot;coffee\u0026quot;)) print(paste(\u0026quot;File Completed: \u0026quot;, j)) } else{ address = paste(\u0026quot;2019_all_Assistance_Full_20191009/\u0026quot;, \u0026quot;2019_all_Assistance_Full_20191010\u0026quot;, \u0026quot;_\u0026quot;, j ,\u0026quot;.csv\u0026quot;, sep = \u0026quot;\u0026quot;) financialB \u0026lt;- vroom(address, delim = \u0026quot;,\u0026quot;, col_select = c(award_id_fain, award_id_uri, award_description, cfda_title, action_date, awarding_agency_name, awarding_sub_agency_name, recipient_name, recipient_country_name, recipient_state_name, recipient_city_name, federal_action_obligation)) financialB$award_description \u0026lt;- gsub(\u0026#39;\\\u0026quot;|\\\\\u0026#39;, \u0026quot;\u0026quot;, financialB$award_description, fixed = TRUE) financialB \u0026lt;- filter(financialB, str_detect(str_to_lower(award_description), \u0026quot;coffee\u0026quot;)) financialA \u0026lt;- rbind(financialA, financialB) print(paste(\u0026quot;File Completed: \u0026quot;, j)) } } ##### # Beginning the Analysis # Looking at what\u0026#39;s in the contracts and financial assistance data sets # Basically, picking a direction for further analyses ##### # Total Contract Spend/Number of Awards # Note: I first eyeballed these to ensure they were actually about coffee - they are contractTot \u0026lt;- contractsA %\u0026gt;% summarise(totalObligations = sum(federal_action_obligation), numAwards = n_distinct(award_id_piid)) # $11.7 million contractTot$fundType \u0026lt;- \u0026quot;Contracts\u0026quot; # Total Financial Assistance Spend/Number of Awards # First looking at assistance programs (called CFDAs) to see if they match up # CFDA Analysis financialA %\u0026gt;% group_by(cfda_title) %\u0026gt;% summarize(totalObligations = sum(federal_action_obligation)) %\u0026gt;% arrange(desc(totalObligations)) # clearly some noise here, but I need more information # just going to download to a Excel file write.xlsx(financialA, \u0026quot;coffeefinancial.xlsx\u0026quot;) # ALRIGHT, found the CFDAs that I\u0026#39;m not interested in financialC \u0026lt;- financialA %\u0026gt;% filter(cfda_title != \u0026quot;ALLERGY AND INFECTIOUS DISEASES RESEARCH\u0026quot;, cfda_title != \u0026quot;BASIC CENTER GRANT\u0026quot;, cfda_title != \u0026quot;DRUG-FREE COMMUNITIES SUPPORT PROGRAM financial\u0026quot;, cfda_title != \u0026quot;FOSTER GRANDPARENT PROGRAM\u0026quot;, cfda_title != \u0026quot;HIGHWAY PLANNING AND CONSTRUCTION\u0026quot;, cfda_title != \u0026quot;PUBLIC DIPLOMACY PROGRAMS\u0026quot;, cfda_title != \u0026quot;RETIRED AND SENIOR VOLUNTEER PROGRAM\u0026quot;, cfda_title != \u0026quot;SCIENCE\u0026quot;, cfda_title != \u0026quot;SUBSTANCE ABUSE AND MENTAL HEALTH SERVICES PROJECTS OF REGIONAL AND NATIONAL SIGNIFICANCE\u0026quot;, cfda_title != \u0026quot;TRIO UPWARD BOUND\u0026quot;, cfda_title != \u0026quot;VOLUNTEERS IN SERVICE TO AMERICA\u0026quot;) # Saving the version with just CFDAs of interest saveRDS(financialC, \u0026quot;coffeeGrants.RData\u0026quot;) # NOW, actually calculating totals for Financial Assistance financialTot \u0026lt;- financialC %\u0026gt;% summarise(totalObligations = sum(federal_action_obligation), numAwards = n_distinct(award_id_fain)) # $7.1 million financialTot$fundType \u0026lt;- \u0026quot;Financial Assistance\u0026quot; # Binding contracts and financial assistance to see how they compare tots \u0026lt;- bind_rows(financialTot, contractTot) totsSum \u0026lt;- tots %\u0026gt;% summarise(totalObligations = sum(totalObligations)) tots \u0026lt;- tots %\u0026gt;% group_by(fundType, totalObligations, numAwards) %\u0026gt;% summarize(\u0026quot;PercentFunding\u0026quot; = totalObligations/totsSum$totalObligations) # Formatting data for a table tots$totalObligations \u0026lt;- dollar(tots$totalObligations) tots$PercentFunding \u0026lt;- percent(tots$PercentFunding) tots$numAwards \u0026lt;- comma(tots$numAwards) # Cleaning the variable names tots \u0026lt;- tots %\u0026gt;% rename(\u0026#39;Award Type\u0026#39; = fundType, \u0026#39;Total Obligations\u0026#39; = totalObligations, \u0026#39;Number of Awards\u0026#39; = numAwards, \u0026#39;Percent of FY19 Funding\u0026#39; = PercentFunding) # attempting a pretty table # NOTE: code entirely ripped off from: https://www.littlemissdata.com/blog/prettytables formattable(tots, align =c(\u0026quot;l\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;, \u0026quot;c\u0026quot;), list(`Award Type` = formatter( \u0026quot;span\u0026quot;, style = ~ style(color = \u0026quot;grey\u0026quot;, font.weight = \u0026quot;bold\u0026quot;)) )) # This table makes contracts look more interesting to me, so focussing on that ##### # Further Analyses of Coffee Contracts # Basically, what\u0026#39;s going on here? ##### # Analysis by Agency contractsA %\u0026gt;% group_by(awarding_agency_name) %\u0026gt;% summarise(totalObligations = sum(federal_action_obligation)) %\u0026gt;% arrange(desc(totalObligations)) # Almost ALL of this is DoD (\u0026gt;90%) # Prepping for a Pretty Table cTable \u0026lt;- contractsA %\u0026gt;% group_by(awarding_agency_name) %\u0026gt;% summarise(totalObligations = sum(federal_action_obligation), totalAwards = n_distinct(award_id_piid), percentFunding = totalObligations/sum(contractsA$federal_action_obligation)) %\u0026gt;% filter(totalObligations \u0026gt; 0) %\u0026gt;% arrange(desc(totalObligations)) cTable$awarding_agency_name \u0026lt;- str_to_title(gsub(\u0026quot;\\\\s*\\\\([^\\\\)]+\\\\)\u0026quot;,\u0026quot;\u0026quot;, as.character(cWaffle$awarding_agency_name)), locale = \u0026quot;en\u0026quot;) cTable$totalObligations \u0026lt;- dollar(cTable$totalObligations) cTable$totalAwards \u0026lt;- comma(cTable$totalAwards) cTable$percentFunding \u0026lt;- percent(cTable$percentFunding) cTable \u0026lt;- cTable %\u0026gt;% rename(\u0026#39;Total Obligations\u0026#39; = totalObligations, \u0026#39;Number of Awards\u0026#39; = totalAwards, \u0026quot;Percent of FY19 Contracts Funding\u0026quot; = percentFunding, \u0026quot;Awarding Agency\u0026quot; = awarding_agency_name) formattable(cTable, align =c(\u0026quot;l\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;, \u0026quot;c\u0026quot;), list(`Awarding Agency` = formatter( \u0026quot;span\u0026quot;, style = ~ style(color = \u0026quot;grey\u0026quot;, font.weight = \u0026quot;bold\u0026quot;)) )) # Gonna focus on DoD contractsA %\u0026gt;% filter(awarding_agency_name == \u0026quot;DEPARTMENT OF DEFENSE (DOD)\u0026quot;) %\u0026gt;% group_by(awarding_sub_agency_name) %\u0026gt;% summarise(totalObligations = sum(federal_action_obligation)) %\u0026gt;% arrange(desc(totalObligations)) # DLA has, \u0026gt;90% of these contracts. Makes sense. # Gonna focus on DLA: Where\u0026#39;s the money going? # US vs Elsewhere contractsA %\u0026gt;% filter(awarding_agency_name == \u0026quot;DEPARTMENT OF DEFENSE (DOD)\u0026quot; \u0026amp; awarding_sub_agency_name == \u0026quot;DEFENSE LOGISTICS AGENCY\u0026quot;) %\u0026gt;% group_by(recipient_country_name) %\u0026gt;% summarise(totalObligations = sum(federal_action_obligation)) %\u0026gt;% arrange(desc(totalObligations)) # most going to the US # Digging deeper in the US spending usCoffee \u0026lt;- contractsA %\u0026gt;% filter(awarding_agency_name == \u0026quot;DEPARTMENT OF DEFENSE (DOD)\u0026quot; \u0026amp; awarding_sub_agency_name == \u0026quot;DEFENSE LOGISTICS AGENCY\u0026quot; \u0026amp; recipient_country_name == \u0026quot;UNITED STATES\u0026quot;) %\u0026gt;% group_by(recipient_state_name) %\u0026gt;% summarise(totalObligations = sum(federal_action_obligation)) %\u0026gt;% arrange(desc(totalObligations)) ##### # Let\u0026#39;s make a choropleth! # Admittedly, very little effort was put in here. # Not a fan of chloropleths, it turns out ##### # checking that states look pretty unique(usCoffee$recipient_state_name) # removing Guam because it\u0026#39;s not on my map usCoffee$recipient_state_name[usCoffee$recipient_state_name == \u0026quot;GUAM\u0026quot;] \u0026lt;- NA coffeeStates \u0026lt;- usCoffee %\u0026gt;% filter(!is.na(recipient_state_name)) %\u0026gt;% #removes Guam group_by(recipient_state_name) %\u0026gt;% summarise(totalObligations = sum(totalObligations)) %\u0026gt;% arrange(desc(totalObligations)) # This is all being done to work with the package below to get state location data coffeeStates \u0026lt;- coffeeStates %\u0026gt;% rename(state = recipient_state_name) coffeeStates$state \u0026lt;- tolower(coffeeStates$state) stateList \u0026lt;- urbnmapr::states #urban institutes state location data stateList$state_name \u0026lt;- tolower(stateList$state_name) coffeeStatesFIN \u0026lt;- left_join(stateList, coffeeStates, by = c(\u0026quot;state_name\u0026quot; = \u0026quot;state\u0026quot;)) map \u0026lt;- coffeeStatesFIN %\u0026gt;% ggplot(aes(long, lat, group = group, fill = totalObligations)) + geom_polygon(color = \u0026quot;grey10\u0026quot;, size = 0.2) + scale_fill_viridis(discrete = FALSE) + labs(title = \u0026quot;Where DLA \u0026#39;Coffee\u0026#39; Contracts are Going\u0026quot;, subtitle = \u0026quot;Fiscal Year 2019\u0026quot;, caption = \u0026quot;Created by @Shunley42; Source: USAspending.gov\u0026quot;, fill = \u0026quot;Dollars Obligated\u0026quot;) + theme_void() + theme(panel.background = element_rect(fill = NA, colour = \u0026quot;#cccccc\u0026quot;), plot.title = element_text(size = 20, hjust = 0.5, family = \u0026quot;Helvetica\u0026quot;, color = \u0026quot;#000000\u0026quot;), plot.subtitle = element_text(size = 15, hjust = 0.5, family = \u0026quot;Helvetica\u0026quot;, color = \u0026quot;#000000\u0026quot;), plot.caption = element_text(size = 15, hjust = 0.5, family = \u0026quot;Helvetica\u0026quot;, color = \u0026quot;#000000\u0026quot;), legend.title = element_text(size = 10, hjust = 0.5, family = \u0026quot;Helvetica\u0026quot;, color = \u0026quot;#000000\u0026quot;)) map  ","date":1572307200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572366902,"objectID":"15ea694ecfcdee7d660b55fd1e050d91","permalink":"/post/us-federal-awards-and-coffee/","publishdate":"2019-10-29T00:00:00Z","relpermalink":"/post/us-federal-awards-and-coffee/","section":"post","summary":"Y’all. I love coffee. If you have spent any time around me, you have probably seen me drink at least a cup or two. Consequently, I was interested in seeing how much the US Federal government spends on this magical bean.\nThe public has two options to see how much money the Federal government spends on coffee. Option 1 would be to call up a bunch of agencies (likely with FOIA in hand) and ask them (preferably nicely since you just FOIA’d them) to do the math for you.","tags":["Analysis","R","USAspending"],"title":"US Federal Awards and Coffee","type":"post"},{"authors":null,"categories":["R","USAspending","Analysis"],"content":" Making Sense of USASpending Contracts Data The contract data from USASpending can be overwhelming to parse through. Each year contains millions of rows and hundreds of columns of data, making it difficult for anyone to dive into at first. To make it a bit easier, I wanted to run through a simple analysis I conducted using contracts data from FY18.\n A Couple Notes The first question that might come to mind is - why am I looking at FY 2018 data when we just kicked off FY 2020 (October 1, 2019)? Aren’t the data a bit dated? My decision was based on the fact that I wanted a complete year of data. FY 2019 has ended, but it’s not completely in the books (i.e., folks are still logging changes), so I will hold off on using that data for a few more weeks.\nThroughout this post, I will be referring exclusively to Federal “obligations”, which is a strange term for those who aren’t familiar with Federal finances. In short, an obligation is a binding agreement in which the Federal government has agreed to pay money, which is close enough to actual spending for my purposes. If you want a more (perhaps overly) detailed explanation, you can check out this post here.\n Loading the Data Before getting into the fun stuff, let’s load the data. For this analysis, everything you need can be found in the USASpending Award Archives. Just select “Contracts” and “2018”, and a zip file will download. As a heads-up, the contract archives for each year are fairly large. The zip file weighs in at 918 MB, and once unzipped, the CSVs total up to around 10 GB or so. I was able to run all of the code below using a 2017 MacBook with 8 GB of RAM, but it took a minute and crashed out a couple times.\nlibrary(tidyverse) library(vroom) # Create Working Directory Short Cuts local_dir \u0026lt;- \u0026quot;/Users/samhunley/Desktop/2018_all_Contracts_Full_20191009\u0026quot; # Your folder location here setwd(local_dir) # Loading that data # vroom can load multiple CSVs at once. The variable \u0026quot;files\u0026quot; stores the file names to do this. files \u0026lt;- fs::dir_ls(glob = \u0026quot;2018_all_Contracts_Full_20191010_*csv\u0026quot;) contracts18 \u0026lt;- vroom(files, delim = \u0026quot;,\u0026quot;, col_select = c(award_id_piid, award_description, product_or_service_code_description, action_date, naics_description, awarding_agency_name, awarding_sub_agency_name, recipient_name, recipient_country_name, recipient_state_name, recipient_city_name, federal_action_obligation))  Compressing and Formatting the data Given the large files involved, I recommend compressing the data into a smaller format by summarizing down to only the information we care about.\n# Compressing the data by summarizing contracts18 \u0026lt;- contracts18 %\u0026gt;% group_by(recipient_name, product_or_service_code_description, naics_description, awarding_agency_name, awarding_sub_agency_name) %\u0026gt;% summarise(fundsObligated = sum(federal_action_obligation))  Beginning the Analysis I wanted to see the top recipients of contract funding in FY 2018. So the first thing I did was summarize funds obligated according to recipient names. I used the following code to produce an ordered list of contract recipients according to obligations. I have typed out the top 10 below the code.\n# Simple approach to summarizing according to recipients # Note - I opted to remove entries with obligations of 0 or less (deobligations) vendors \u0026lt;- contracts18 %\u0026gt;% group_by(recipient_name) %\u0026gt;% summarise(fundsObligated = sum(fundsObligated)) %\u0026gt;% filter(fundsObligated \u0026gt; 0) %\u0026gt;% arrange(desc(fundsObligated))  Top 10 Recipients of Federal Contracts in FY 2018 Lockheed Martin: $36.7B Boeing*: $28.0B Raytheon: $17.0B Northrop Grumman: $9.5B McKesson: $8.9B Huntington Ingalls Industries: $7.0B GD Electric Boat: $5.7B United Technologies: $5.4B Booz Allen Hamilton: $4.1B Humana: $4.1B  * A note on Boeing: When you run the code yourself, you will see that Boeing is actually listed twice, once under “The Boeing Company” and again as “Boeing Company, The”. This is a common issue in the contracts data. I’ve adjusted for it in the Top 10 above\n Looking more into Lockheed Martin Now, I can vaguely tell that there’s a significant amount of defense and health related spending involved, but I want to know specifics. To get a better sense of what this money is being spent on, I’m going to pick on Lockheed Martin because they are at the top of the list.\nYou can breakdown contract spending according to a variety of criteria. Personally, my first question is which agencies are paying Lockheed Martin? See below the code for a summary.\n# Filtering to look at just LOCKHEED MARTIN CORPORATION lockheed \u0026lt;- contracts18 %\u0026gt;% filter(recipient_name == \u0026quot;LOCKHEED MARTIN CORPORATION\u0026quot;) # Summarizing by funding agencies agencies \u0026lt;- lockheed %\u0026gt;% group_by(awarding_agency_name) %\u0026gt;% summarise(fundsObligated = sum(fundsObligated)) %\u0026gt;% filter(fundsObligated \u0026gt; 0) %\u0026gt;% arrange(desc(fundsObligated))  Agencies Contracts to Lockheed Martin in FY 2018 Department of Defense: $35,219,980,889 NASA: $1,268,964,214 Department of Transportation: $111,747,754 General Services Administration: $69,696,297 Homeland Security: $40,203,136 Social Security: $1,924,246 The Justice Department: $308,650   One of These is not like the others! Seriously, Social Security paid almost $2 million to Lockheed Martin? WHY? I’m not always up on the latest news, but I don’t remember Social Security having any aerospace needs.\nTo get this answer, we can look at the North American Industry Categorization System (NAICS) codes and Product or Service Codes (PSCs). The script below isolates the codes in question. When you do that, though, you can see that the associated NAICS code is “Other computer related services” and the associated PSC is “IT and Telecom - Other IT and Telecommunications”. Neither of these descriptors are particularly…enlightening.\nssa \u0026lt;- lockheed %\u0026gt;% filter(awarding_agency_name == \u0026quot;SOCIAL SECURITY ADMINISTRATION (SSA)\u0026quot;) # NAICs ssa %\u0026gt;% group_by(naics_description) %\u0026gt;% summarise(fundsObligated = sum(fundsObligated)) # PSCs ssa %\u0026gt;% group_by(product_or_service_code_description) %\u0026gt;% summarise(fundsObligated = sum(fundsObligated)) %\u0026gt;% arrange(desc(fundsObligated))  Digging Deeper To get more details, one would have to track down the specific contract(s) associated with this spending. This requires reloading the big dataset and then searching for SSA and Lockheed Martin. After doing this, I found 2 entries and 1 unique award associated with Social Security and Lockheed Martin, labelled with the ID # 28321318FDS030006.\nUsing USAspending’s Advanced Search, I looked for this award, and I found… a contract to Leidos Innovations?? The plot thickens!\n What might be happening here? Searching for the contract on FPDS.gov (where USAspending gets its contract data), I found 3 entries for this contract, 2 actions going to Lockheed Martin and 1 going to Leidos. Based on my knowledge, I would say that there are a 3 possibilities for what’s going on here.\nPerhaps the award was given to both Lockheed Martin and Leidos. Maybe the award was initially given to LockheedMartin, but then later transferred to Leidos for unknown reasons. Or - my favorite possibility - This is all the result of a typo! Lockheed Martin never received this award, and it was intended for Leidos from the get-go.   It Remains a Mystery for Now! As much as I would love to solve this mystery, my trail has run cold at this point. So I am calling it quits. However, this is an example of the sort of information you can dig into using USASpending data.\n ","date":1571011200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571011200,"objectID":"ad677a8524f8a93fcd67855c40e2ff04","permalink":"/post/top-recipients-of-us-federal-contracts-in-fy-2018/","publishdate":"2019-10-14T00:00:00Z","relpermalink":"/post/top-recipients-of-us-federal-contracts-in-fy-2018/","section":"post","summary":"Making Sense of USASpending Contracts Data The contract data from USASpending can be overwhelming to parse through. Each year contains millions of rows and hundreds of columns of data, making it difficult for anyone to dive into at first. To make it a bit easier, I wanted to run through a simple analysis I conducted using contracts data from FY18.\n A Couple Notes The first question that might come to mind is - why am I looking at FY 2018 data when we just kicked off FY 2020 (October 1, 2019)?","tags":["USAspending","R","Analysis"],"title":"Top Recipients of US Federal Contracts in FY 2018","type":"post"},{"authors":["Sam Hunley"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Sam Hunley","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Sam Hunley","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]